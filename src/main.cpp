#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WebServer.h>
#include <SoftwareSerial.h>

// –ü—ñ–Ω–∏
#define IR_TX_PIN D2   // TX ESP ‚Üí RX –º–æ–¥—É–ª—è
#define LED_WIFI_PIN D6

SoftwareSerial irSerial(IR_TX_PIN, -1); // –¢—ñ–ª—å–∫–∏ TX (TX ESP ‚Üí RX IR-–º–æ–¥—É–ª—è)

ESP8266WebServer server(80);

IPAddress local_IP(192, 168, 31, 206);
IPAddress gateway(192, 168, 31, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8);
IPAddress secondaryDNS(8, 8, 4, 4);

// WiFi
const char *ssid = "Xiaomi_5DBA";
const char *password = "0634615110";
bool wifiWasConnected = true;

// –ë—É—Ñ–µ—Ä–∏ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç–∏—Ö –∫–æ–º–∞–Ω–¥
uint8_t receivedCommand[32];  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∫–æ–º–∞–Ω–¥–∏
size_t receivedLength = 0;

void handleRoot() {
  server.send(200, "text/plain", "ESP –ø—Ä–∞—Ü—é—î!");
}

void sendCommandToIRModule(uint8_t command[], size_t length) {
  irSerial.write(command, length);
  irSerial.flush();
  Serial.print("üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ IR –∫–æ–º–∞–Ω–¥—É: ");
  for (int i = 0; i < length; i++) {
    Serial.printf("0x%02X ", command[i]);
  }
  Serial.println();
}

void handleOn() {
  Serial.println("üü¢ –ö–æ–º–∞–Ω–¥–∞ ON –≤—ñ–¥ Telegram");
  uint8_t air_on[] = {0xA1, 0xF1, 0x01, 0x00, 0x00, 0xA2}; // –ø—Ä–∏–∫–ª–∞–¥
  sendCommandToIRModule(air_on, sizeof(air_on));
  server.send(200, "application/json", "{\"status\":\"ok\",\"action\":\"on\"}");
}

void handleOff() {
  Serial.println("üü¢ –ö–æ–º–∞–Ω–¥–∞ OFF –≤—ñ–¥ Telegram");
  uint8_t air_off[] = {0xA1, 0xF1, 0x02, 0x00, 0x00, 0xA3}; // –ø—Ä–∏–∫–ª–∞–¥
  sendCommandToIRModule(air_off, sizeof(air_off));
  server.send(200, "application/json", "{\"status\":\"ok\",\"action\":\"off\"}");
}

void handleMuteOff() {
  Serial.println("üü¢ –ö–æ–º–∞–Ω–¥–∞ MUTE");
  uint8_t mute[] = {0xA1, 0xF1, 0x0D, 0x00, 0x00, 0xAE};
  sendCommandToIRModule(mute, sizeof(mute));
  server.send(200, "application/json", "{\"status\":\"ok\",\"action\":\"mute\"}");
}

void handleNotFound() {
  server.send(404, "application/json", "{\"status\":\"error\",\"message\":\"not found\"}");
}

void handlerWiFiStatus() {
  if (WiFi.status() != WL_CONNECTED) {
    if (wifiWasConnected) {
      Serial.println("‚ö†Ô∏è WiFi –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ");
      digitalWrite(LED_WIFI_PIN, LOW);
      wifiWasConnected = false;
    }
  } else {
    if (!wifiWasConnected) {
      Serial.println("‚úÖ WiFi –∑–Ω–æ–≤—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
      digitalWrite(LED_WIFI_PIN, HIGH);
      wifiWasConnected = true;
    }
  }
}

void receiveIRCommandFromRemote() {
  bool gotSomething = false;

  while (irSerial.available()) {
    uint8_t b = irSerial.read();
    Serial.printf("üì• UART –±–∞–π—Ç: 0x%02X\n", b);

    if (receivedLength < sizeof(receivedCommand)) {
      receivedCommand[receivedLength++] = b;
      gotSomething = true;
    }
    delay(2); // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü—ñ—è
  }

  if (gotSomething && receivedLength >= 3) { // –º–µ–Ω—à–µ 3 ‚Äî —Å–∫–æ—Ä—ñ—à–µ –∑–∞ –≤—Å–µ —à—É–º
    Serial.println("üî∏ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤–Ω—É –∫–æ–º–∞–Ω–¥—É:");

    Serial.print("uint8_t command[] = { ");
    for (size_t i = 0; i < receivedLength; i++) {
      Serial.printf("0x%02X", receivedCommand[i]);
      if (i < receivedLength - 1) Serial.print(", ");
    }
    Serial.println(" };");

    Serial.printf("üìè –î–æ–≤–∂–∏–Ω–∞: %d –±–∞–π—Ç\n", receivedLength);
  } else if (gotSomething) {
    Serial.println("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ —à—É–º –∞–±–æ –Ω–µ–ø–æ–≤–Ω—É –∫–æ–º–∞–Ω–¥—É.");
  }

  receivedLength = 0; // —Å–∫–∏–¥–∞—î–º–æ –±—É—Ñ–µ—Ä
}


void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("ESP8266 –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ");

  pinMode(LED_WIFI_PIN, OUTPUT);
  digitalWrite(LED_WIFI_PIN, LOW);

  // UART –¥–æ IR –º–æ–¥—É–ª—è
  irSerial.begin(9600);
  delay(1000);
  Serial.println("–Ü–ß –º–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

  // WiFi
  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
    Serial.println("‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IP –Ω–µ–≤–¥–∞–ª–µ");
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n‚úÖ WiFi –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
  digitalWrite(LED_WIFI_PIN, HIGH);

  // HTTP-–º–∞—Ä—à—Ä—É—Ç–∏
  server.on("/", handleRoot);
  server.on("/air_on", handleOn);
  server.on("/air_off", handleOff);
  server.on("/mute_off", handleMuteOff);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ");
}

void loop() {
  server.handleClient();
  handlerWiFiStatus();
  receiveIRCommandFromRemote(); // üëà –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É—î –ø—Ä–∏–π–æ–º –∫–æ–º–∞–Ω–¥
}
