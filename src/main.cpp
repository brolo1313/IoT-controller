#include <Arduino.h>
#include <ESP8266WiFi.h>      // –¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Wi-Fi –Ω–∞ —á—ñ–ø–∞—Ö ESP8266.
#include <Wire.h>             // –¶–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —à–∏–Ω–æ—é I2C (–î–æ–∑–≤–æ–ª—è—î "—Ä–æ–∑–º–æ–≤–ª—è—Ç–∏" –∑ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ –ø–æ I2C (OLED, –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∏, RTC))
#include <Adafruit_GFX.h>     // –¶–µ –≥—Ä–∞—Ñ—ñ—á–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –≤—ñ–¥ Adafruit, —è–∫–∞ –¥–∞—î —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω–∞—Ö
#include <Adafruit_SSD1306.h> // –¶–µ –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è OLED-–¥–∏—Å–ø–ª–µ—ó–≤ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º SSD1306 (–Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ 128x64 OLED –¥–∏—Å–ø–ª–µ—ó).
#include <ESP8266WebServer.h>
#include <IRrecv.h>
#include <IRremoteESP8266.h>
#include <IRutils.h>
#include <IRsend.h>
#include "secrets.h"
//  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è IRrecv: D1, D2, D5, D6, D7

// IR –∫–æ–¥ TV
// 0xD - mute
// IR –∫–æ–¥ air conditioner
uint16_t rawData[99] = {3158, 1542, 566, 1042, 570, 1014, 566, 278, 570, 222,
                        622, 222, 596, 1012, 596, 224, 594, 250, 594, 1014, 570, 1014, 598, 218, 596, 1042, 570, 222, 568,
                        302, 572, 1014, 566, 1044, 542, 276, 568, 1040, 572, 1014, 566, 278, 570, 246, 598, 1014, 568, 224,
                        620, 224, 594, 1016, 598, 218, 570, 302, 572, 218, 590, 280, 568, 222, 592, 278, 570, 246, 598, 220,
                        598, 246, 598, 220, 594, 276, 542, 276, 542, 302, 572, 218, 592, 280, 568, 224, 594, 274, 570, 1014,
                        594, 222, 596, 224, 620, 1014, 572, 274, 570, 222, 568};

const uint8_t RECV_PIN = D5;

const uint16_t kIrLedPin = D2; // –ü—ñ–Ω, –¥–æ —è–∫–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –Ü–ß-—Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥
IRsend irsend(kIrLedPin);
IRrecv irrecv(RECV_PIN);
decode_results results;

ESP8266WebServer server(SECRET_PORT);

#define LED_WIFI_PIN LED_BUILTIN

void handleRoot()
{
  server.send(200, "text/plain", "ESP –ø—Ä–∞—Ü—é—î!");
}

void handleOn()
{
  Serial.println("üü¢ –ö–æ–º–∞–Ω–¥–∞ ON –≤—ñ–¥ Telegram");
  irsend.sendRaw(rawData, 99, 38); // 99 - –¥–æ–≤–∂–∏–Ω–∞ –º–∞—Å–∏–≤—É, 38 - —á–∞—Å—Ç–æ—Ç–∞ –∫–ì—Ü
  // irsend.sendNEC(0xF7C03F, 32);
  Serial.println("üì° –Ü–ß-—Å–∏–≥–Ω–∞–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!");

  server.send(200, "application/json", "{\"status\":\"ok\",\"action\":\"on\"}");
}

void handleOff()
{
  Serial.println("üü¢ –ö–æ–º–∞–Ω–¥–∞ Off –≤—ñ–¥ Telegram");
  server.send(200, "application/json", "{\"status\":\"ok\",\"action\":\"off\"}");
}

void handleMuteOff()
{
  Serial.println("üü¢ –ö–æ–º–∞–Ω–¥–∞ Mute –≤—ñ–¥ Telegram");
  irsend.sendRC6(0xD, 20);
  server.send(200, "application/json", "{\"status\":\"ok\",\"action\":\"off\"}");
}

void handleNotFound()
{
  server.send(404, "application/json", "{\"status\":\"ok\",\"message\":\"not found\"}");
}

void handleIRInput();
void handlerWiFiStatus();

void setup()
{
  Serial.begin(115200);
  delay(1000);
  Serial.println("ESP8266 –ø—Ä–∞—Ü—é—î! ‚úÖ");

  pinMode(LED_WIFI_PIN, OUTPUT);
  digitalWrite(LED_WIFI_PIN, HIGH);

  irsend.begin();      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ü–ß-–ø–µ—Ä–µ–¥–∞–≤–∞—á–∞
  irrecv.enableIRIn(); // ‚Üê –ü–†–ê–í–ò–õ–¨–ù–ò–ô –∑–∞–ø—É—Å–∫
  Serial.println("IR Receiver test start...");

  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS))
  {
    Serial.println("‚ö†Ô∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è IP –Ω–µ –≤–¥–∞–ª–∞—Å—è");
  }

  WiFi.begin(SECRET_SSID, SECRET_PASSWORD);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print("...");
  }

  Serial.println("\nWiFi OK ‚úÖ");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/air_on", handleOn);
  server.on("/air_off", handleOff);
  server.on("/mute_off", handleMuteOff);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ");
}

bool wifiWasConnected = false;

void loop()
{
  server.handleClient();
  handlerWiFiStatus();
}

void handleIRInput()
{
  if (irrecv.decode(&results))
  {
    Serial.println("‚åõ –ü—Ä–∏–π–Ω—è—Ç–æ –¥–∞–Ω—ñ");

    // –í–∏–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏–≥–Ω–∞–ª
    Serial.println(resultToHumanReadableBasic(&results));
    Serial.println(resultToSourceCode(&results));
    Serial.print("IR –∫–æ–¥ (HEX): ");
    Serial.println(resultToHexidecimal(&results));

    // –û–±—Ä–æ–±–∫–∞ –ª–∏—à–µ "–Ω–µ–≤—ñ–¥–æ–º–∏—Ö" –ø—Ä–æ—Ç–æ–∫–æ–ª—ñ–≤ –∑ 50 –±—ñ—Ç–∞–º–∏
    if (results.decode_type == UNKNOWN && results.bits == 50)
    {
      Serial.println("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ –Ü–ß-—Å–∏–≥–Ω–∞–ª, –≤–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—é");

    }
    else
    {
      Serial.print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —ñ–Ω—à–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª: ");
      Serial.println(resultToHumanReadableBasic(&results));
    }

    // –ì–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
    irrecv.resume();
  }
}

void handlerWiFiStatus()
{
  if (WiFi.status() != WL_CONNECTED)
  {
    if (wifiWasConnected)
    {
      Serial.println("‚ö†Ô∏è WiFi –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ");
      digitalWrite(LED_WIFI_PIN, HIGH);
      wifiWasConnected = false;
    }
  }
  else
  {
    if (!wifiWasConnected)
    {
      Serial.println("‚úÖ WiFi –∑–Ω–æ–≤—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
      digitalWrite(LED_WIFI_PIN, LOW);
      wifiWasConnected = true;
    }
  }
}
